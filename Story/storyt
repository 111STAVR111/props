#!/bin/bash
MAGNETA=$(tput setaf 5)
RESET=$(tput sgr0)

while true
do

# Logo

curl -s https://raw.githubusercontent.com/111STAVR111/props/main/logo_1.txt | bash

# Menu

PS3='Select an action: '
options=(
"Install Node"
"Check Story logs"
"Check Geth logs"
"Sync status"
"Check sync info"
"Check validator info"
"Create wallet"
"Check wallet info"
"Check wallet balance"
"Update Fresh Peers"
"Check Version"
"Synchronization via SnapShot (Pruned)"
"Synchronization via SnapShot (Archive)"
"UPDATE"
"Delete Node"
"Exit")
select opt in "${options[@]}"
do
case $opt in

"Install Node")
echo "*********************"
echo -e "\e[1m\e[35m		Lets's begin\e[0m"
echo "*********************"
echo -e "\e[1m\e[32m	Enter your Validator_Name:\e[0m"
echo "_|-_|-_|-_|-_|-_|-_|"
read Validator_Name
echo "_|-_|-_|-_|-_|-_|-_|"
echo export Validator_Name=${Validator_Name} >> $HOME/.bash_profile
echo export CHAIN_ID="odyssey" >> $HOME/.bash_profile
source ~/.bash_profile
echo -e "\e[1m\e[32m	DO YOU WANT TO CHANGE THE DEFAULT PORTS? (yes/no):\e[0m"
read change_ports
change_ports=$(echo "$change_ports" | tr '[:upper:]' '[:lower:]')
if [[ "$change_ports" == "yes" || "$change_ports" == "y" ]]; then
    echo -e "\e[1m\e[32m	Enter the new first two digits for the proxy_app port (26658):\e[0m"
    read proxy_app_prefix
    echo -e "\e[1m\e[32m	Enter the new first two digits for the rpc port (26657):\e[0m"
    read rpc_prefix
    echo -e "\e[1m\e[32m	Enter the new first two digits for the p2p port (26656):\e[0m"
    read p2p_prefix
    if ! [[ "$proxy_app_prefix" =~ ^[0-9]{2}$ ]] || ! [[ "$rpc_prefix" =~ ^[0-9]{2}$ ]] || ! [[ "$p2p_prefix" =~ ^[0-9]{2}$ ]]; then
        echo "Invalid input. Ports will not be changed."
        change_ports="n"
    fi
fi

echo -e "\e[1m\e[32m1. Updating packages and dependencies--> \e[0m" && sleep 1
# UPDATE APT
sudo apt update && sudo apt upgrade -y
sudo apt install curl tar wget clang pkg-config libssl-dev libleveldb-dev jq build-essential bsdmainutils git make ncdu htop screen unzip bc fail2ban htop -y
echo "${MAGNETA}ðŸ”¥Dependencies updated ðŸ”¥${RESET}"
sleep 1

echo -e "        \e[1m\e[32m2. Installing GO--> \e[0m" && sleep 1
# INSTALL GO
ver="1.22.2"
wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz"
sudo rm -rf /usr/local/go
sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz"
rm "go$ver.linux-amd64.tar.gz"
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile
source $HOME/.bash_profile
go version
echo "${MAGNETA}ðŸ”¥GO is installed ðŸ”¥${RESET}"
sleep 1

echo -e "              \e[1m\e[32m3. Downloading and building binaries--> \e[0m" && sleep 1
# INSTALL
cd $HOME && mkdir -p go/bin/
wget -O geth https://github.com/piplabs/story-geth/releases/download/v0.10.0/geth-linux-amd64
chmod +x geth
mv ~/geth ~/go/bin/geth
git clone https://github.com/piplabs/story
cd $HOME/story
git checkout v0.12.0
go build -o story ./client
sudo mv $HOME/story/story $HOME/go/bin/
mkdir -p ~/.story/story
mkdir -p ~/.story/geth
echo "${MAGNETA}ðŸ”¥Binaries installed successfully ðŸ”¥${RESET}"
sleep 1
story init --network $CHAIN_ID --moniker $Validator_Name

wget -O $HOME/.story/story/config/genesis.json https://raw.githubusercontent.com/111STAVR111/props/refs/heads/main/Story/genesis.json

if [ "$change_ports" == "y" ]; then
    sed -i "s/tcp:\/\/127\.0\.0\.1:26658/tcp:\/\/127.0.0.1:${proxy_app_prefix}658/" $HOME/.story/story/config/config.toml
    sed -i "s/tcp:\/\/127\.0\.0\.1:26657/tcp:\/\/127.0.0.1:${rpc_prefix}657/" $HOME/.story/story/config/config.toml
    sed -i "s/tcp:\/\/0\.0\.0\.0:26656/tcp:\/\/0.0.0.0:${p2p_prefix}656/" $HOME/.story/story/config/config.toml
    echo "Ports have been updated to ${proxy_app_prefix}658, ${rpc_prefix}657, and ${p2p_prefix}656."
fi

wget -O $HOME/.story/story/config/addrbook.json "https://raw.githubusercontent.com/111STAVR111/props/main/Story/addrbook.json"
PEERS=""
sed -i -e "/^\[p2p\]/,/^\[/{s/^[[:space:]]*persistent_peers *=.*/persistent_peers = \"$PEERS\"/}" $HOME/.story/story/config/config.toml
echo "${MAGNETA}ðŸ”¥Ports and peers updated ðŸ”¥${RESET}"
sleep 1
# Setup systemd services
sudo tee /etc/systemd/system/story-geth.service > /dev/null <<EOF
[Unit]
Description=Story Geth Client
After=network.target

[Service]
User=$USER
ExecStart=$HOME/go/bin/geth --odyssey --syncmode full --http --http.api eth,net,web3,engine --http.vhosts '*' --http.addr 127.0.0.1 --http.port 8545 --ws --ws.api eth,web3,net,txpool --ws.addr 127.0.0.1 --ws.port 8546
Restart=on-failure
RestartSec=3
LimitNOFILE=4096

[Install]
WantedBy=multi-user.target
EOF

sudo tee /etc/systemd/system/story.service > /dev/null <<EOF
[Unit]
Description=Story Consensus Client
After=network.target

[Service]
User=$USER
WorkingDirectory=$HOME/.story/story
ExecStart=$HOME/go/bin/story run
Restart=on-failure
RestartSec=3
LimitNOFILE=4096

[Install]
WantedBy=multi-user.target
EOF

# Start and enable services
sudo systemctl daemon-reload
sudo systemctl enable story-geth story
sudo systemctl restart story-geth story
echo "${MAGNETA}ðŸ”¥Service files are installed and running ðŸ”¥${RESET}"

echo '=============== SETUP FINISHED ==================='
echo -e 'Congratulations:        \e[1m\e[32mSUCCESSFUL NODE INSTALLATION\e[0m'
echo -e 'To check logs:        \e[1m\e[33mjournalctl -fu story-geth -o cat\e[0m'
echo -e 'To check logs:        \e[1m\e[33mjournalctl -fu story -o cat\e[0m'
echo -e "To check sync status: \e[1m\e[35mcurl -s http://localhost:${rpc_prefix}657/status | jq .result.sync_info\e[0m"

break
;;
"Create wallet")
echo "_|-_|-_|-_|-_|-_|-_|"
echo -e "      \e[1m\e[35m Your WalletName:\e[0m"
echo "_|-_|-_|-_|-_|-_|-_|"
read Wallet
echo export Wallet=${Wallet} >> $HOME/.bash_profile
source ~/.bash_profile
story validator export
echo -e "      \e[1m\e[32m!!!!!!!!!SAVE!!!!!!!!!!!!!!!!SAVE YOUR PRICATE KEY!!!!!!!!!SAVE!!!!!!!!!!!!!!!!\e[0m'"

break
;;
"Synchronization via SnapShot (Archive)")
cd $HOME
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
PINK='\033[1;35m'
BLUE='\033[1;34m'
NO_COLOR='\033[0m'
SNAPSHOT_INFO_URL="https://story-ar-data.stavr.tech/snapshot-info"
SNAPSHOT_INFO=$(curl -s $SNAPSHOT_INFO_URL)
BLOCK_HEIGHT=$(echo $SNAPSHOT_INFO | jq -r '.block_height')
CREATION_TIME=$(echo $SNAPSHOT_INFO | jq -r '.creation_time')
FILE_SIZE_GETH=$(echo $SNAPSHOT_INFO | jq -r '.file_size_geth')
FILE_SIZE_STORY=$(echo $SNAPSHOT_INFO | jq -r '.file_size_story')
echo -e "Block Height: ${YELLOW}$BLOCK_HEIGHT${NO_COLOR}"
echo -e "Creation Time: ${GREEN}$CREATION_TIME${NO_COLOR}"
echo -e "File Size (Story): ${PINK}$FILE_SIZE_STORY${NO_COLOR}"
echo -e "File Size (Geth): ${BLUE}$FILE_SIZE_GETH${NO_COLOR}"
read -p "Do you want to continue with synchronization via Archive snapshot? (yes/no): " USER_CHOICE
USER_CHOICE=$(echo "$USER_CHOICE" | tr '[:upper:]' '[:lower:]')
if [[ "$USER_CHOICE" == "yes" || "$USER_CHOICE" == "y" ]]; then
    echo "Proceeding with synchronization..."
    snap list | grep -q lz4 || snap install lz4
    sudo systemctl stop story story-geth
    cp $HOME/.story/story/data/priv_validator_state.json $HOME/.story/story/priv_validator_state.json.backup
    rm -rf $HOME/.story/story/data
    rm -rf $HOME/.story/geth/odyssey/geth/chaindata
    curl -o - -L https://story-archive.snapshot.stavr.tech/story-snap.tar.lz4 | lz4 -c -d - | tar -x -C $HOME/.story/story/
	curl -o - -L https://story-archive.snapshot.stavr.tech/story_geth-snap.tar.lz4 | lz4 -c -d - | tar -x -C $HOME/.story/geth/odyssey/geth/
    mv $HOME/.story/story/priv_validator_state.json.backup $HOME/.story/story/data/priv_validator_state.json
    wget -O $HOME/.story/story/config/addrbook.json "https://raw.githubusercontent.com/111STAVR111/props/main/Story/addrbook.json"
    sudo systemctl restart story-geth
    sudo systemctl restart story && sudo journalctl -fu story -ocat
else
    echo "Operation cancelled. Returning to menu..."
fi


break
;;
"UPDATE")
rm -rf $HOME/story
git clone https://github.com/piplabs/story
cd $HOME/story
git checkout v0.12.1
go build -o story ./client
sudo mv $HOME/story/story $(which story)
sudo systemctl restart story && sudo journalctl -fu story -ocat

break
;;
"Check Story logs")
sudo journalctl -fu story -ocat

break
;;
"Check Geth logs")
sudo journalctl -fu story-geth -ocat

break
;;
"Synchronization via SnapShot (Pruned)")
cd $HOME
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
PINK='\033[1;35m'
BLUE='\033[1;34m'
NO_COLOR='\033[0m'
SNAPSHOT_INFO_URL="https://story-data.stavr.tech/snapshot-info"
SNAPSHOT_INFO=$(curl -s $SNAPSHOT_INFO_URL)
BLOCK_HEIGHT=$(echo $SNAPSHOT_INFO | jq -r '.block_height')
CREATION_TIME=$(echo $SNAPSHOT_INFO | jq -r '.creation_time')
FILE_SIZE_GETH=$(echo $SNAPSHOT_INFO | jq -r '.file_size_geth')
FILE_SIZE_STORY=$(echo $SNAPSHOT_INFO | jq -r '.file_size_story')
echo -e "Block Height: ${YELLOW}$BLOCK_HEIGHT${NO_COLOR}"
echo -e "Creation Time: ${GREEN}$CREATION_TIME${NO_COLOR}"
echo -e "File Size (Story): ${PINK}$FILE_SIZE_STORY${NO_COLOR}"
echo -e "File Size (Geth): ${BLUE}$FILE_SIZE_GETH${NO_COLOR}"
read -p "Do you want to continue with synchronization via Pruned snapshot? (yes/no): " USER_CHOICE
USER_CHOICE=$(echo "$USER_CHOICE" | tr '[:upper:]' '[:lower:]')
if [[ "$USER_CHOICE" == "yes" || "$USER_CHOICE" == "y" ]]; then
    echo "Proceeding with synchronization..."
    snap list | grep -q lz4 || snap install lz4
    sudo systemctl stop story story-geth
    cp $HOME/.story/story/data/priv_validator_state.json $HOME/.story/story/priv_validator_state.json.backup
    rm -rf $HOME/.story/story/data
    rm -rf $HOME/.story/geth/odyssey/geth/chaindata
    curl -o - -L https://story.snapshot.stavr.tech/story-snap.tar.lz4 | lz4 -c -d - | tar -x -C $HOME/.story/story/
    curl -o - -L https://story.snapshot.stavr.tech/story_geth-snap.tar.lz4 | lz4 -c -d - | tar -x -C $HOME/.story/geth/odyssey/geth/
    mv $HOME/.story/story/priv_validator_state.json.backup $HOME/.story/story/data/priv_validator_state.json
    wget -O $HOME/.story/story/config/addrbook.json "https://raw.githubusercontent.com/111STAVR111/props/main/Story/addrbook.json"
    sudo systemctl restart story-geth
    sudo systemctl restart story && sudo journalctl -fu story -ocat
else
    echo "Operation cancelled. Returning to menu..."
fi


break
;;
"Check validator info")
curl localhost:$(sed -n '/\[rpc\]/,/laddr/ { /laddr/ {s/.*://; s/".*//; p} }' $HOME/.story/story/config/config.toml)/status | jq

break
;;
"Check wallet info")
story validator export

break
;;
"Check Version")
story_output=$(story version 2>&1)
echo -e "\e[32m${story_output}\e[0m"

geth version 2>&1 | head -n 4 | while IFS= read -r line; do
    echo -e "\e[33m${line}\e[0m"
done

break
;;
"Check wallet balance")
echo "_|-_|-_|-_|-_|-_|-_|"
echo -e "      \e[1m\e[35m Enter your EVM Address:\e[0m"
echo "_|-_|-_|-_|-_|-_|-_|"
read EVMADDRESS

BALANCE=$(geth --exec "eth.getBalance('$EVMADDRESS')" attach ~/.story/geth/odyssey/geth.ipc 2>/dev/null)
BALANCE_ETH=$(awk "BEGIN {printf \"%.18f\", $BALANCE/1000000000000000000}")

echo "Balance: $BALANCE_ETH IP"

break
;;
"Check sync info")
RPC_PORT=$(sed -n '/\[rpc\]/,/laddr/ { /laddr/ {s/.*://; s/".*//; p} }' $HOME/.story/story/config/config.toml)
curl -s http://localhost:$RPC_PORT/status | jq .result.sync_info

break
;;
"Sync status")
RPC_PORT=$(sed -n '90{s/.*://; s/"//g; p}' /root/.story/story/config/config.toml)

while true; do
    local_height=$(curl -s localhost:$RPC_PORT/status | jq -r '.result.sync_info.latest_block_height')
    network_height=$(curl -s https://story.rpc-archive.t.stavr.tech/status | jq -r '.result.sync_info.latest_block_height')
    blocks_left=$((network_height - local_height))
    
    estimated_time=$(echo "$blocks_left * 3.01" | bc)
    
    hours=$(echo "$estimated_time / 3600" | bc)
    minutes=$(echo "($estimated_time % 3600) / 60" | bc)

    echo -e "\033[1;38mYour height:\033[0m \033[1;32m$local_height\033[0m | \033[1;35mNetwork height:\033[0m \033[1;36m$network_height\033[0m | \033[1;29mBlocks left:\033[0m \033[1;31m$blocks_left\033[0m | \033[1;33mEstimated time: $hours hours $minutes minutes\033[0m"
    sleep 5
done

break
;;
"Update Fresh Peers")
PEERS_URL="https://story-archive.snapshot.stavr.tech/peers-scan.txt"
update_peers() {
    PEERS=$(curl -s $PEERS_URL | sed -n 's/^PEERS=\(.*\)$/\1/p')
    if [ -n "$PEERS" ]; then
        sed -i -e "/^\[p2p\]/,/^\[/{s/^[[:space:]]*persistent_peers *=.*/persistent_peers = \"$PEERS\"/}" $HOME/.story/story/config/config.toml
        echo -e "${MAGNETA}ðŸ”¥Peers updated successfully ðŸ”¥${RESET}"
    else
        echo "Failed to get peer data. Check the URL or try again later."
    fi
}
update_peers

break
;;
"Delete Node")
echo -e "\e[31mAre you sure you want to delete the node? (Yes/No):\e[0m"
read confirmation

if [ "$confirmation" == "Yes" ]; then
    echo -e "\e[32m$confirmation\e[0m - Starting deletion process."

    sudo systemctl stop story-geth story
    sudo systemctl disable story-geth story
    sudo rm /etc/systemd/system/story-geth.service /etc/systemd/system/story.service
    sudo systemctl daemon-reload
    cd $HOME
    rm -rf .story
    rm -rf story
    rm -rf $(which story)
    rm -rf $(which geth)

    echo "Node has been successfully deleted."
else
    echo "Node deletion cancelled."
fi

break
;;
"Exit")
exit
esac
done
done
