#!/bin/bash
MAGNETA=$(tput setaf 5)
RESET=$(tput sgr0)

while true
do

# Logo

curl -s https://raw.githubusercontent.com/111STAVR111/props/main/logo_1.txt | bash

# Menu

PS3='Select an action: '
options=(
"Install Node"
"Create wallet"
"Check node logs"
"Sync status"
"Synchronization via StateSync"
"Synchronization via SnapShot (Pruned)"
"Synchronization via SnapShot (Archive)"
"UPDATE"
"Delete Node"
"Exit")
select opt in "${options[@]}"
do
case $opt in

"Install Node")
echo "*********************"
echo -e "\e[1m\e[35m		Lets's begin\e[0m"
echo "*********************"
echo -e "\e[1m\e[32m	Enter your Validator_Name:\e[0m"
echo "_|-_|-_|-_|-_|-_|-_|"
read Validator_Name
echo "_|-_|-_|-_|-_|-_|-_|"
echo export Validator_Name=${Validator_Name} >> $HOME/.bash_profile
echo export CHAIN_ID="celestia" >> $HOME/.bash_profile
source ~/.bash_profile
echo -e "\e[1m\e[32m	DO YOU WANT TO CHANGE THE DEFAULT PORTS? (yes/no):\e[0m"
read change_ports
change_ports=$(echo "$change_ports" | tr '[:upper:]' '[:lower:]')
if [[ "$change_ports" == "yes" || "$change_ports" == "y" ]]; then
    echo -e "\e[1m\e[32m	Enter the new first two digits for the proxy_app port (26658):\e[0m"
    read proxy_app_prefix
    echo -e "\e[1m\e[32m	Enter the new first two digits for the rpc port (26657):\e[0m"
    read rpc_prefix
    echo -e "\e[1m\e[32m	Enter the new first two digits for the p2p port (26656):\e[0m"
    read p2p_prefix
    echo -e "\e[1m\e[32m	Enter the new first two digits for the pprof port (6060):\e[0m"
    read pprof_prefix
    echo -e "\e[1m\e[32m	Enter the new first two digits for the grpc port (9090):\e[0m"
    read grpc_prefix
    echo -e "\e[1m\e[32m	Enter the new first two digits for the grpc-web port (9091):\e[0m"
    read grpcw_prefix
    if ! [[ "$proxy_app_prefix" =~ ^[0-9]{2}$ ]] || ! [[ "$rpc_prefix" =~ ^[0-9]{2}$ ]] || ! [[ "$p2p_prefix" =~ ^[0-9]{2}$ ]]; then
        echo "Invalid input. Ports will not be changed."
        change_ports="n"
    fi
fi

echo -e "\e[1m\e[32m1. Updating packages and dependencies--> \e[0m" && sleep 1
# UPDATE APT
sudo apt update && sudo apt upgrade -y
sudo apt install curl tar wget clang pkg-config libssl-dev libleveldb-dev jq build-essential bsdmainutils git make ncdu htop screen unzip bc fail2ban htop -y
echo "${MAGNETA}ðŸ”¥Dependencies updated ðŸ”¥${RESET}"
sleep 1

echo -e "        \e[1m\e[32m2. Installing GO--> \e[0m" && sleep 1
#INSTALL GO
ver="1.23.1"
wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz"
sudo rm -rf /usr/local/go
sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz"
rm "go$ver.linux-amd64.tar.gz"
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile
source $HOME/.bash_profile
go version
echo "${MAGNETA}ðŸ”¥GO is installed ðŸ”¥${RESET}"
sleep 1

echo -e "              \e[1m\e[32m3. Downloading and building binaries--> \e[0m" && sleep 1
#INSTALL
cd $HOME && mkdir -p go/bin/
git clone https://github.com/celestiaorg/celestia-app/
cd $HOME/celestia-app
git checkout v3.3.1
make install
echo "${MAGNETA}ðŸ”¥Binaries installed successfully ðŸ”¥${RESET}"
sleep 1

celestia-appd init $Validator_Name --chain-id $CHAIN_ID

if [ "$change_ports" == "y" ]; then
    echo "Changing proxy_app port..."
    sed -i "s/tcp:\/\/127\.0\.0\.1:26658/tcp:\/\/127.0.0.1:${proxy_app_prefix}658/" $HOME/.celestia-app/config/config.toml
    echo "Changing rpc port..."
    sed -i "s/tcp:\/\/127\.0\.0\.1:26657/tcp:\/\/127.0.0.1:${rpc_prefix}657/" $HOME/.celestia-app/config/config.toml
    echo "Changing p2p port..."
    sed -i "s/tcp:\/\/0\.0\.0\.0:26656/tcp:\/\/0.0.0.0:${p2p_prefix}656/" $HOME/.celestia-app/config/config.toml
    echo "Changing pprof port..."
    sed -i "s/pprof_laddr = \"localhost:6060\"/pprof_laddr = \"localhost:${pprof_prefix}60\"/" $HOME/.celestia-app/config/config.toml
    echo "Changing grpc port..."
    sed -i "s/address = \"0\.0\.0\.0:9090\"/address = \"0\.0\.0\.0:${grpc_prefix}90\"/" $HOME/.celestia-app/config/app.toml
    echo "Changing grpc port..."
    sed -i "s/address = \"0\.0\.0\.0:9091\"/address = \"0\.0\.0\.0:${grpcw_prefix}91\"/" $HOME/.celestia-app/config/app.toml
    echo "Ports have been updated to ${proxy_app_prefix}658, ${rpc_prefix}657, ${p2p_prefix}656, ${pprof_prefix}60, ${grpc_prefix}90 and ${grpcw_prefix}91."
fi


wget -O $HOME/.celestia-app/config/genesis.json https://celestia-m.genesis.stavr.tech/genesis.json
wget -O $HOME/.celestia-app/config/addrbook.json "https://raw.githubusercontent.com/111STAVR111/props/refs/heads/main/Celestia/Mainnet/Node/addrbook.json"


echo -e "                     \e[1m\e[32m4. Node optimization and improvement--> \e[0m" && sleep 1

sed -i.bak -e "s/^minimum-gas-prices *=.*/minimum-gas-prices = \"0.002utia\"/;" ~/.celestia-app/config/app.toml
external_address=$(wget -qO- eth0.me) 
sed -i.bak -e "s/^external_address *=.*/external_address = \"$external_address:26656\"/" $HOME/.celestia-app/config/config.toml
peers=""
sed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \"$peers\"/" $HOME/.celestia-app/config/config.toml
seeds=""
sed -i.bak -e "s/^seeds =.*/seeds = \"$seeds\"/" $HOME/.celestia-app/config/config.toml
sed -i 's/max_num_inbound_peers =.*/max_num_inbound_peers = 50/g' $HOME/.celestia-app/config/config.toml
sed -i 's/max_num_outbound_peers =.*/max_num_outbound_peers = 50/g' $HOME/.celestia-app/config/config.toml
echo "${MAGNETA}ðŸ”¥Ports and peers updated ðŸ”¥${RESET}"
sleep 1

# pruning
pruning="custom"
pruning_keep_recent="1000"
pruning_keep_every="0"
pruning_interval="10"
sed -i -e "s/^pruning *=.*/pruning = \"$pruning\"/" $HOME/.celestia-app/config/app.toml
sed -i -e "s/^pruning-keep-recent *=.*/pruning-keep-recent = \"$pruning_keep_recent\"/" $HOME/.celestia-app/config/app.toml
sed -i -e "s/^pruning-keep-every *=.*/pruning-keep-every = \"$pruning_keep_every\"/" $HOME/.celestia-app/config/app.toml
sed -i -e "s/^pruning-interval *=.*/pruning-interval = \"$pruning_interval\"/" $HOME/.celestia-app/config/app.toml


sudo tee /etc/systemd/system/celestia-appd.service > /dev/null <<EOF
[Unit]
Description=celestia-appd
After=network-online.target

[Service]
User=$USER
ExecStart=$(which celestia-appd) start
Restart=on-failure
RestartSec=3
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
EOF


# start service
sudo systemctl daemon-reload
sudo systemctl enable celestia-appd
sudo systemctl restart celestia-appd
echo "${MAGNETA}ðŸ”¥Service files are installed and running ðŸ”¥${RESET}"

echo '=============== SETUP FINISHED ==================='
echo -e 'Congratulations:        \e[1m\e[32mSUCCESSFUL NODE INSTALLATION\e[0m'
echo -e 'To check logs:        \e[1m\e[33mjournalctl -fu celestia-appd -o cat\e[0m'
echo -e "To check sync status: \e[1m\e[35mcurl -s localhost:${rpc_prefix}657/status\e[0m"

break
;;
"Create wallet")
echo "_|-_|-_|-_|-_|-_|-_|"
echo -e "      \e[1m\e[35m Your WalletName:\e[0m"
echo "_|-_|-_|-_|-_|-_|-_|"
read Wallet
echo export Wallet=${Wallet} >> $HOME/.bash_profile
source ~/.bash_profile
celestia-appd keys add $Wallet
echo -e "      \e[1m\e[32m!!!!!!!!!SAVE!!!!!!!!!!!!!!!!SAVE YOUR MNEMONIC PHRASE!!!!!!!!!SAVE!!!!!!!!!!!!!!!!\e[0m'"

break
;;
"Synchronization via StateSync")
RPC="https://celestia.rpc.m.stavr.tech:443"
LATEST_HEIGHT=$(curl -s $RPC/block | jq -r .result.block.header.height); \
BLOCK_HEIGHT=$((LATEST_HEIGHT - 1000)); \
TRUST_HASH=$(curl -s "$RPC/block?height=$BLOCK_HEIGHT" | jq -r .result.block_id.hash)
sed -i.bak -E "s|^(enable[[:space:]]+=[[:space:]]+).*$|\1true| ; \
s|^(rpc_servers[[:space:]]+=[[:space:]]+).*$|\1\"$RPC,$RPC\"| ; \
s|^(trust_height[[:space:]]+=[[:space:]]+).*$|\1$BLOCK_HEIGHT| ; \
s|^(trust_hash[[:space:]]+=[[:space:]]+).*$|\1\"$TRUST_HASH\"| ; \
s|^(seeds[[:space:]]+=[[:space:]]+).*$|\1\"\"|" $HOME/.celestia-app/config/config.toml
sudo systemctl stop celestia-appd && celestia-appd tendermint unsafe-reset-all --home $HOME/.celestia-app
wget -O $HOME/.celestia-app/config/addrbook.json "https://raw.githubusercontent.com/111STAVR111/props/refs/heads/main/Celestia/Mainnet/Node/addrbook.json"
sudo systemctl restart celestia-appd && sudo journalctl -fu celestia-appd -o cat

break
;;
"UPDATE")
rm -rf $HOME/celestia-app
git clone https://github.com/celestiaorg/celestia-app/
cd $HOME/celestia-app
git checkout v3.3.1
make install
sudo systemctl restart celestia-appd && sudo journalctl -fu celestia-appd -o cat

break
;;
"Check node logs")
sudo journalctl -fu celestia-appd -ocat

break
;;
"Synchronization via SnapShot (Pruned)")
cd $HOME
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
PINK='\033[1;35m'
NO_COLOR='\033[0m'
SNAPSHOT_INFO_URL="https://celestia-m.snapshot.stavr.tech/snapshot-info.txt"
SNAPSHOT_INFO=$(curl -s $SNAPSHOT_INFO_URL)

BLOCK_HEIGHT=$(echo "$SNAPSHOT_INFO" | grep "Block height" | awk '{print $3}')
CREATION_TIME_RAW=$(echo "$SNAPSHOT_INFO" | grep "Creation time" | cut -d ' ' -f3-)

CREATION_TIME_EPOCH=$(date -d "$CREATION_TIME_RAW" +%s)
CURRENT_TIME_EPOCH=$(date +%s)
TIME_DIFF=$((CURRENT_TIME_EPOCH - CREATION_TIME_EPOCH))

if ((TIME_DIFF < 60)); then
    TIME_AGO="${TIME_DIFF} sec ago"
elif ((TIME_DIFF < 3600)); then
    TIME_AGO="$((TIME_DIFF / 60)) min ago"
elif ((TIME_DIFF < 86400)); then
    TIME_AGO="$((TIME_DIFF / 3600)) h ago"
else
    TIME_AGO="$((TIME_DIFF / 86400)) d ago"
fi

FILE_SIZE=$(echo "$SNAPSHOT_INFO" | grep "Pruned size" | awk '{print $3}')

echo -e "Block Height: ${YELLOW}$BLOCK_HEIGHT${NO_COLOR}"
echo -e "Creation Time: ${GREEN}$CREATION_TIME_RAW${NO_COLOR}"
echo -e "File Size (Pruned): ${PINK}$FILE_SIZE${NO_COLOR} (${TIME_AGO})"
read -p "Do you want to continue with synchronization via Pruned snapshot? (yes/no): " USER_CHOICE
USER_CHOICE=$(echo "$USER_CHOICE" | tr '[:upper:]' '[:lower:]')
if [[ "$USER_CHOICE" == "yes" || "$USER_CHOICE" == "y" ]]; then
    echo "Proceeding with synchronization..."
    snap list | grep -q lz4 || snap install lz4
	sudo systemctl stop celestia-appd
	cp $HOME/.celestia-app/data/priv_validator_state.json $HOME/.celestia-app/priv_validator_state.json.backup
	rm -rf $HOME/.celestia-app/data
	curl -o - -L https://celestia-m.snapshot.stavr.tech/celestia-m-snap.tar.lz4 | lz4 -c -d - | tar -x -C $HOME/.celestia-app
	mv $HOME/.celestia-app/priv_validator_state.json.backup $HOME/.celestia-app/data/priv_validator_state.json
	wget -O $HOME/.celestia-app/config/addrbook.json "https://raw.githubusercontent.com/111STAVR111/props/refs/heads/main/Celestia/Mainnet/Node/addrbook.json"
	sudo systemctl restart celestia-appd && journalctl -fu celestia-appd -o cat
else
    echo "Operation cancelled. Returning to menu..."
fi

break
;;
"Synchronization via SnapShot (Archive)")
cd $HOME
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
PINK='\033[1;35m'
BLUE='\033[1;34m'
NO_COLOR='\033[0m'
SNAPSHOT_INFO_URL="https://consensus-data-m.stavr.tech/snapshot-info"
SNAPSHOT_INFO=$(curl -s $SNAPSHOT_INFO_URL)
BLOCK_HEIGHT=$(echo $SNAPSHOT_INFO | jq -r '.block_height')
CREATION_TIME=$(echo $SNAPSHOT_INFO | jq -r '.creation_time')
FILE_SIZE=$(echo $SNAPSHOT_INFO | jq -r '.file_size')
echo -e "Block Height: ${YELLOW}$BLOCK_HEIGHT${NO_COLOR}"
echo -e "Creation Time: ${GREEN}$CREATION_TIME${NO_COLOR}"
echo -e "File Size (Archive): ${BLUE}$FILE_SIZE${NO_COLOR}"
read -p "Do you want to continue with synchronization via Archive snapshot? (yes/no): " USER_CHOICE
USER_CHOICE=$(echo "$USER_CHOICE" | tr '[:upper:]' '[:lower:]')
if [[ "$USER_CHOICE" == "yes" || "$USER_CHOICE" == "y" ]]; then
    echo "Proceeding with synchronization..."
    snap list | grep -q lz4 || snap install lz4
	sudo systemctl stop celestia-appd
	cp $HOME/.celestia-app/data/priv_validator_state.json $HOME/.celestia-app/priv_validator_state.json.backup
	rm -rf $HOME/.celestia-app/data
	curl -o - -L https://celestia-m.archive-snap.stavr.tech/celestia-m-archive.tar.lz4 | lz4 -c -d - | tar -x -C $HOME/.celestia-app
	mv $HOME/.celestia-app/priv_validator_state.json.backup $HOME/.celestia-app/data/priv_validator_state.json
	wget -O $HOME/.celestia-app/config/addrbook.json "https://raw.githubusercontent.com/111STAVR111/props/refs/heads/main/Celestia/Mainnet/Node/addrbook.json"
	sudo systemctl restart celestia-appd && journalctl -fu celestia-appd -o cat
else
    echo "Operation cancelled. Returning to menu..."
fi

break
;;
"Sync status")
RPC_PORT=$(sed -n '91{s/.*://; s/"//g; p}' $HOME/.celestia-app/config/config.toml)

while true; do
    local_height=$(curl -s localhost:$RPC_PORT/status | jq -r '.result.sync_info.latest_block_height')
    network_height=$(curl -s https://celestia.rpc-archive.m.stavr.tech/status | jq -r '.result.sync_info.latest_block_height')
    blocks_left=$((network_height - local_height))
    
    estimated_time=$(echo "$blocks_left * 12.01" | bc)
    
    hours=$(echo "$estimated_time / 3600" | bc)
    minutes=$(echo "($estimated_time % 3600) / 60" | bc)

    echo -e "\033[1;38mYour height:\033[0m \033[1;32m$local_height\033[0m | \033[1;35mNetwork height:\033[0m \033[1;36m$network_height\033[0m | \033[1;29mBlocks left:\033[0m \033[1;31m$blocks_left\033[0m | \033[1;33mEstimated time: $hours hours $minutes minutes\033[0m"
    sleep 5
done

break
;;
"Delete Node")
echo -e "\e[31mAre you sure you want to delete the node? (Yes/No):\e[0m"
read confirmation

if [ "$confirmation" == "Yes" ]; then
    echo -e "\e[32m$confirmation\e[0m - Starting deletion process."
	
sudo systemctl stop celestia-appd
sudo systemctl disable celestia-appd
rm /etc/systemd/system/celestia-appd.service
sudo systemctl daemon-reload
cd $HOME
rm -rf celestia-app
rm -rf .celestia-app
rm -rf $(which celestia-appd)

    echo "Node has been successfully deleted."
else
    echo "Node deletion cancelled."
fi

break
;;
"Exit")
exit
esac
done
done
