#!/bin/bash

while true
do

# Logo

curl -s https://raw.githubusercontent.com/111STAVR111/props/main/logo_1.txt | bash

# Menu

PS3='Select an action: '
options=(
"Install Node"
"Check wallet"
"Check node logs"
"Check node status"
"Synchronization via SnapShot"
"UPDATE"
"Delete Node"
"Exit")
select opt in "${options[@]}"
do
case $opt in

"Install Node")
echo "*********************"
echo -e "\e[1m\e[35m		Lets's begin\e[0m"
echo "*********************"
read -p "Enter your IP address RPC Node: " IP
read -p "Enter your RPC Port from your RPC Node: " RPC_PORT
read -p "Enter your gRPC Port from your RPC Node: " gRPC_PORT
read -p "Enter your Wallet name: " Wallet


echo -e "\e[1m\e[32m1. Updating packages and dependencies--> \e[0m" && sleep 1
#UPDATE APT
sudo apt update && sudo apt upgrade -y
sudo apt install curl tar wget clang pkg-config libssl-dev libleveldb-dev jq build-essential bsdmainutils git make ncdu htop screen unzip bc fail2ban htop -y

echo -e "        \e[1m\e[32m2. Installing GO--> \e[0m" && sleep 1
#INSTALL GO
ver="1.23.1"
wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz"
sudo rm -rf /usr/local/go
sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz"
rm "go$ver.linux-amd64.tar.gz"
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile
source $HOME/.bash_profile
go version

echo -e "              \e[1m\e[32m3. Downloading and building binaries--> \e[0m" && sleep 1
#INSTALL
cd $HOME && mkdir -p go/bin/
git clone https://github.com/celestiaorg/celestia-node.git
cd celestia-node/
git checkout tags/v0.16.2-mocha
make build
sudo make install
make cel-key
mv $HOME/celestia-node/cel-key /usr/local/bin/

#Set up variables
echo "export IP=\"$IP\"" >> ~/.bash_profile
echo 'export RPC_PORT="$RPC_PORT"' >> ~/.bash_profile
echo 'export gRPC_PORT="$gRPC_PORT"' >> ~/.bash_profile
echo 'export Wallet="$Wallet"' >> ~/.bash_profile
source ~/.bash_profile

cel-key add $Wallet --keyring-backend test --node.type bridge --p2p.network mocha
echo -e "      \e[1m\e[32m!!!!!!!!!SAVE!!!!!!!!!!!!!!!!SAVE YOUR MNEMONIC PHRASE!!!!!!!!!SAVE!!!!!!!!!!!!!!!!\e[0m'"

celestia bridge init --core.ip $IP --p2p.network mocha --core.rpc.port $RPC_PORT --core.grpc.port $gRPC_PORT --keyring.keyname $Wallet

sudo tee /etc/systemd/system/celestia-bridge.service > /dev/null <<EOF
[Unit]
Description=celestia Bridge
After=network-online.target

[Service]
User=$USER
Environment=GODEBUG="asynctimerchan=1"
ExecStart=$(which celestia) bridge start \
--p2p.network mocha \
--metrics.tls=true --metrics --metrics.endpoint otel.celestia-mocha.com \
--keyring.keyname $Wallet
Restart=on-failure
RestartSec=3
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
EOF


# start service
sudo systemctl daemon-reload
sudo systemctl enable celestia-bridge
sudo systemctl restart celestia-bridge

echo '=============== SETUP FINISHED ==================='
echo -e 'Congratulations:        \e[1m\e[32mSUCCESSFUL NODE INSTALLATION\e[0m'
echo -e 'To check logs:        \e[1m\e[33mjournalctl -fu celestia-bridge -ocat\e[0m'
echo -e "To check sync status: \e[1m\e[35mcelestia header sync-state --node.store  ~/.celestia-bridge-mocha-4\e[0m"


break
;;
"Check wallet")
cel-key list --node.type bridge --keyring-backend test --p2p.network mocha

break
;;
"UPDATE")
cd $HOME/celestia-node/
git pull
git checkout tags/v0.16.2-mocha
make build
make install
make cel-key
sudo systemctl stop celestia-bridge
celestia bridge config-update --p2p.network mocha
sudo systemctl restart celestia-bridge && sudo journalctl -fu celestia-bridge -ocat

break
;;
"Check node logs")
sudo journalctl -fu celestia-bridge -o cat

break
;;
"Check node status")
celestia header sync-state --node.store ~/.celestia-bridge-mocha-4/

break
;;
"Synchronization via SnapShot")
cd $HOME
snap install lz4
sudo systemctl stop celestia-bridge
rm -rf $HOME/.celestia-bridge-mocha-4/{blocks,data,index,inverted_index,transients,.lock}
curl -o - -L https://celestia.bridge-archive.snap-t.stavr.tech/bridge-t-snap.tar.lz4 | lz4 -c -d - | tar -x -C $HOME/.celestia-bridge-mocha-4/ --strip-components 2
sudo systemctl restart celestia-bridge && sudo journalctl -fu celestia-bridge -ocat

break
;;
"Delete Node")
systemctl stop celestia-bridge
systemctl disable celestia-bridge
rm /etc/systemd/system/celestia-bridge.service
systemctl daemon-reload
cd $HOME
rm -rf .celestia-bridge-mocha-4
rm -rf celestia-node
rm -rf $(which celestia)

break
;;
"Exit")
exit
esac
done
done
