#!/bin/bash
MAGNETA=$(tput setaf 5)
RESET=$(tput sgr0)

while true
do

# Logo

curl -s https://raw.githubusercontent.com/111STAVR111/props/main/logo_1.txt | bash

# Menu

PS3='Select an action: '
options=(
"Install Node"
"Check logs"
"Sync status"
"Check sync info"
"Check validator info"
"Create wallet"
"Check Version"
"Synchronization via Statesync"
"Synchronization via SnapShot (Pruned)"
"UPDATE"
"Delete Node"
"Exit")
select opt in "${options[@]}"
do
case $opt in

"Install Node")
echo "*********************"
echo -e "\e[1m\e[35m		Lets's begin\e[0m"
echo "*********************"
echo -e "\e[1m\e[32m	Enter your Validator_Name:\e[0m"
echo "_|-_|-_|-_|-_|-_|-_|"
read Validator_Name
echo "_|-_|-_|-_|-_|-_|-_|"
echo export Validator_Name=${Validator_Name} >> $HOME/.bash_profile
echo export CHAIN_ID="althea_258432-1" >> $HOME/.bash_profile
source ~/.bash_profile
echo -e "\e[1m\e[32m	DO YOU WANT TO CHANGE THE DEFAULT PORTS? (yes/no):\e[0m"
read change_ports
change_ports=$(echo "$change_ports" | tr '[:upper:]' '[:lower:]')
if [[ "$change_ports" == "yes" || "$change_ports" == "y" ]]; then
    echo -e "\e[1m\e[32m	Enter the new first two digits for the proxy_app port (26658):\e[0m"
    read proxy_app_prefix
    echo -e "\e[1m\e[32m	Enter the new first two digits for the rpc port (26657):\e[0m"
    read rpc_prefix
    echo -e "\e[1m\e[32m	Enter the new first two digits for the p2p port (26656):\e[0m"
    read p2p_prefix
    echo -e "\e[1m\e[32m	Enter the new first two digits for the pprof port (6060):\e[0m"
    read pprof_prefix
    echo -e "\e[1m\e[32m	Enter the new first two digits for the grpc port (9090):\e[0m"
    read grpc_prefix
    echo -e "\e[1m\e[32m	Enter the new first two digits for the grpc-web port (9091):\e[0m"
    read grpc_web_prefix
    if ! [[ "$proxy_app_prefix" =~ ^[0-9]{2}$ ]] || ! [[ "$rpc_prefix" =~ ^[0-9]{2}$ ]] || ! [[ "$p2p_prefix" =~ ^[0-9]{2}$ ]]; then
        echo "Invalid input. Ports will not be changed."
        change_ports="n"
    fi
fi

echo -e "\e[1m\e[32m1. Updating packages and dependencies--> \e[0m" && sleep 1
# UPDATE APT
sudo apt update && sudo apt upgrade -y
sudo apt install curl tar wget clang pkg-config libssl-dev libleveldb-dev jq build-essential bsdmainutils git make ncdu htop screen unzip bc fail2ban htop -y
echo "${MAGNETA}ðŸ”¥Dependencies updated ðŸ”¥${RESET}"
sleep 1

echo -e "        \e[1m\e[32m2. Installing GO--> \e[0m" && sleep 1
# INSTALL GO
ver="1.21.6"
wget "https://golang.org/dl/go$ver.linux-amd64.tar.gz"
sudo rm -rf /usr/local/go
sudo tar -C /usr/local -xzf "go$ver.linux-amd64.tar.gz"
rm "go$ver.linux-amd64.tar.gz"
echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin" >> $HOME/.bash_profile
source $HOME/.bash_profile
go version
echo "${MAGNETA}ðŸ”¥GO is installed ðŸ”¥${RESET}"
sleep 1

echo -e "              \e[1m\e[32m3. Downloading and building binaries--> \e[0m" && sleep 1
# INSTALL
cd $HOME && mkdir -p go/bin/
git clone https://github.com/AltheaFoundation/althea-L1/
cd $HOME/althea-L1 && git pull
git checkout v1.4.0
make install
echo "${MAGNETA}ðŸ”¥Binaries installed successfully ðŸ”¥${RESET}"
sleep 1
althea init $Validator_Name --chain-id $CHAIN_ID

if [ "$change_ports" == "y" ]; then
    echo "Changing proxy_app port..."
    sed -i "s/tcp:\/\/127\.0\.0\.1:26658/tcp:\/\/127.0.0.1:${proxy_app_prefix}658/" $HOME/.althea/config/config.toml
    echo "Changing rpc port..."
    sed -i "s/tcp:\/\/127\.0\.0\.1:26657/tcp:\/\/127.0.0.1:${rpc_prefix}657/" $HOME/.althea/config/config.toml
    echo "Changing p2p port..."
    sed -i "s/tcp:\/\/0\.0\.0\.0:26656/tcp:\/\/0.0.0.0:${p2p_prefix}656/" $HOME/.althea/config/config.toml
    echo "Changing pprof port..."
    sed -i "s/pprof_laddr = \"localhost:6060\"/pprof_laddr = \"localhost:${pprof_prefix}60\"/" $HOME/.althea/config/config.toml
    echo "Changing grpc port..."
    sed -i "s/address:\/\/0\.0\.0\.0:9090/address:\/\/0.0.0.0:${grpc_prefix}90/" $HOME/.althea/config/app.toml
    echo "Changing grpc port..."
	sed -i "s/address:\/\/0\.0\.0\.0:9091/address:\/\/0.0.0.0:${grpc_web_prefix}91/" $HOME/.althea/config/app.toml
    echo "Ports have been updated to ${proxy_app_prefix}658, ${rpc_prefix}657, ${p2p_prefix}656, ${pprof_prefix}60, ${grpc_prefix}90 and ${grpc_web_prefix}91."
fi

wget -O $HOME/.althea/config/addrbook.json "https://server-1.stavr.tech/Mainnet/Althea/addrbook.json"
wget -O $HOME/.althea/config/genesis.json "https://raw.githubusercontent.com/AltheaFoundation/althea-L1-docs/main/althea-l1-mainnet-genesis.json"
sed -i.bak -e "s/^minimum-gas-prices *=.*/minimum-gas-prices = \"0.0aalthea\"/;" ~/.althea/config/app.toml
external_address=$(wget -qO- eth0.me) 
sed -i.bak -e "s/^external_address *=.*/external_address = \"$external_address:26656\"/" $HOME/.althea/config/config.toml
peers=""
sed -i.bak -e "s/^persistent_peers *=.*/persistent_peers = \"$peers\"/" $HOME/.althea/config/config.toml
seeds=""
sed -i.bak -e "s/^seeds =.*/seeds = \"$seeds\"/" $HOME/.althea/config/config.toml
sed -i 's/max_num_inbound_peers =.*/max_num_inbound_peers = 50/g' $HOME/.althea/config/config.toml
sed -i 's/max_num_outbound_peers =.*/max_num_outbound_peers = 50/g' $HOME/.althea/config/config.toml
echo "${MAGNETA}ðŸ”¥Ports and peers updated ðŸ”¥${RESET}"
sleep 1
# Setup systemd services
sudo tee /etc/systemd/system/althea.service > /dev/null <<EOF
[Unit]
Description=althea
After=network-online.target

[Service]
User=$USER
ExecStart=$(which althea) start
Restart=on-failure
RestartSec=3
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
EOF

# Start and enable services
sudo systemctl daemon-reload
sudo systemctl enable althea
sudo systemctl restart althea
echo "${MAGNETA}ðŸ”¥Service files are installed and running ðŸ”¥${RESET}"

echo '=============== SETUP FINISHED ==================='
echo -e 'Congratulations:        \e[1m\e[32mSUCCESSFUL NODE INSTALLATION\e[0m'
echo -e 'To check logs:        \e[1m\e[33mjournalctl -fu althea -o cat\e[0m'
echo -e "To check sync status: \e[1m\e[35mcurl -s http://localhost:${rpc_prefix}657/status | jq .result.sync_info\e[0m"

break
;;
"Create wallet")
echo "_|-_|-_|-_|-_|-_|-_|"
echo -e "      \e[1m\e[35m Your WalletName:\e[0m"
echo "_|-_|-_|-_|-_|-_|-_|"
read Wallet
echo export Wallet=${Wallet} >> $HOME/.bash_profile
source ~/.bash_profile
althea keys add $Wallet
echo -e "      \e[1m\e[32m!!!!!!!!!SAVE!!!!!!!!!!!!!!!!SAVE YOUR MNEMONIC PHRASE!!!!!!!!!SAVE!!!!!!!!!!!!!!!!\e[0m'"

break
;;
"UPDATE")
echo -e "      \e[1m\e[32m SOOOON\e[0m"
althea version

break
;;
"Check logs")
sudo journalctl -fu althea -ocat

break
;;
"Synchronization via Statesync")
SNAP_RPC=https://althea.rpc.m.stavr.tech:443
LATEST_HEIGHT=$(curl -s $SNAP_RPC/block | jq -r .result.block.header.height); \
BLOCK_HEIGHT=$((LATEST_HEIGHT - 1000)); \
TRUST_HASH=$(curl -s "$SNAP_RPC/block?height=$BLOCK_HEIGHT" | jq -r .result.block_id.hash)

echo $LATEST_HEIGHT $BLOCK_HEIGHT $TRUST_HASH

sed -i.bak -E "s|^(enable[[:space:]]+=[[:space:]]+).*$|\1true| ; \
s|^(rpc_servers[[:space:]]+=[[:space:]]+).*$|\1\"$SNAP_RPC,$SNAP_RPC\"| ; \
s|^(trust_height[[:space:]]+=[[:space:]]+).*$|\1$BLOCK_HEIGHT| ; \
s|^(trust_hash[[:space:]]+=[[:space:]]+).*$|\1\"$TRUST_HASH\"| ; \
s|^(seeds[[:space:]]+=[[:space:]]+).*$|\1\"\"|" $HOME/.althea/config/config.toml
althea tendermint unsafe-reset-all --home /root/.althea
sudo systemctl restart althea && journalctl -fu althea -o cat

break
;;
"Synchronization via SnapShot (Pruned)")
cd $HOME
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
PINK='\033[1;35m'
NO_COLOR='\033[0m'
SNAPSHOT_INFO_URL="https://server-1.stavr.tech/Mainnet/Althea/snapshot-1-info.txt"
SNAPSHOT_INFO=$(curl -s $SNAPSHOT_INFO_URL)

BLOCK_HEIGHT=$(echo "$SNAPSHOT_INFO" | grep "Block height" | awk '{print $3}')
CREATION_TIME_RAW=$(echo "$SNAPSHOT_INFO" | grep "Creation time" | cut -d ' ' -f3-)

CREATION_TIME_EPOCH=$(date -d "$CREATION_TIME_RAW" +%s)
CURRENT_TIME_EPOCH=$(date +%s)
TIME_DIFF=$((CURRENT_TIME_EPOCH - CREATION_TIME_EPOCH))

if ((TIME_DIFF < 60)); then
    TIME_AGO="${TIME_DIFF} sec ago"
elif ((TIME_DIFF < 3600)); then
    TIME_AGO="$((TIME_DIFF / 60)) min ago"
elif ((TIME_DIFF < 86400)); then
    TIME_AGO="$((TIME_DIFF / 3600)) h ago"
else
    TIME_AGO="$((TIME_DIFF / 86400)) d ago"
fi

FILE_SIZE=$(echo "$SNAPSHOT_INFO" | grep "Pruned size" | awk '{print $3}')

echo -e "Block Height: ${YELLOW}$BLOCK_HEIGHT${NO_COLOR}"
echo -e "Creation Time: ${GREEN}$CREATION_TIME_RAW${NO_COLOR}"
echo -e "File Size (Pruned): ${PINK}$FILE_SIZE${NO_COLOR} (${TIME_AGO})"
read -p "Do you want to continue with synchronization via Pruned snapshot? (yes/no): " USER_CHOICE
USER_CHOICE=$(echo "$USER_CHOICE" | tr '[:upper:]' '[:lower:]')
if [[ "$USER_CHOICE" == "yes" || "$USER_CHOICE" == "y" ]]; then
    echo "Proceeding with synchronization..."
    snap list | grep -q lz4 || snap install lz4
sudo systemctl stop althea
cp $HOME/.althea/data/priv_validator_state.json $HOME/.althea/priv_validator_state.json.backup
rm -rf $HOME/.althea/data
curl -o - -L https://server-1.stavr.tech/Mainnet/Althea/althea-snap-2.tar.lz4 | lz4 -c -d - | tar -x -C $HOME/.althea
mv $HOME/.althea/priv_validator_state.json.backup $HOME/.althea/data/priv_validator_state.json
wget -O $HOME/.althea/config/addrbook.json "https://server-1.stavr.tech/Mainnet/Althea/addrbook.json"
sudo systemctl restart althea && journalctl -fu althea -o cat
else
    echo "Operation cancelled. Returning to menu..."
fi


break
;;
"Check validator info")
curl localhost:$(sed -n '/\[rpc\]/,/laddr/ { /laddr/ {s/.*://; s/".*//; p} }' $HOME/.althea/config/config.toml)/status | jq

break
;;
"Check Version")
althea_output=$(prysmd version --long | grep -e version -e commit 2>&1)
echo -e "\e[32m${althea_output}\e[0m"

break
;;
"Check sync info")
RPC_PORT=$(sed -n '/\[rpc\]/,/laddr/ { /laddr/ {s/.*://; s/".*//; p} }' $HOME/.althea/config/config.toml)
curl -s http://localhost:$RPC_PORT/status | jq .result.sync_info

break
;;
"Sync status")
RPC_PORT=$(sed -n '90{s/.*://; s/"//g; p}' $HOME/.althea/config/config.toml)

while true; do
    local_height=$(curl -s localhost:$RPC_PORT/status | jq -r '.result.sync_info.latest_block_height')
    network_height=$(curl -s https://althea.rpc.m.stavr.tech/status | jq -r '.result.sync_info.latest_block_height')
    blocks_left=$((network_height - local_height))
    
    estimated_time=$(echo "$blocks_left * 1.60" | bc)
    
    hours=$(echo "$estimated_time / 3600" | bc)
    minutes=$(echo "($estimated_time % 3600) / 60" | bc)

    echo -e "\033[1;38mYour height:\033[0m \033[1;32m$local_height\033[0m | \033[1;35mNetwork height:\033[0m \033[1;36m$network_height\033[0m | \033[1;29mBlocks left:\033[0m \033[1;31m$blocks_left\033[0m | \033[1;33mEstimated time: $hours hours $minutes minutes\033[0m"
    sleep 5
done

break
;;
"Delete Node")
echo -e "\e[31mAre you sure you want to delete the node? (Yes/No):\e[0m"
read confirmation

if [ "$confirmation" == "Yes" ]; then
    echo -e "\e[32m$confirmation\e[0m - Starting deletion process."

sudo systemctl stop althea
sudo systemctl disable althea
rm /etc/systemd/system/althea.service
sudo systemctl daemon-reload
cd $HOME
rm -rf althea-chain
rm -rf .althea
rm -rf $(which althea)

    echo "Node has been successfully deleted."
else
    echo "Node deletion cancelled."
fi

break
;;
"Exit")
exit
esac
done
done
